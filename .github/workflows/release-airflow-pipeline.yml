name: Release Airflow Pipeline
on:
  workflow_call:
    inputs:
        airflow_volume_claim:
          required: false
          default: airflow-dag-volume
          type: string
        airflow_volume_mount_path:
          required: false
          default: /mnt/efs
          type: string
        airflow_env:
          required: true
          type: string
        run_docker_build:
          required: false
          default: true
          type: boolean
jobs:
    create_runner:
      name: Create runner
      runs-on: ubuntu-latest
      if: github.ref_type == 'tag'
      # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      permissions:
        id-token: write
        contents: read
      steps:
        - name: Create Runner
          id: create_runner
          uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
          with:
            name: ${{ github.event.repository.name }}
            cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
            aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
            namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
            image: ${{ vars.RUNNER_DOCKER_IMAGE}}
            service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
            docker_enabled: true
            volume_claim: ${{ inputs.airflow_volume_claim }}
            volume_mount_path: ${{ inputs.airflow_volume_mount_path }}
      outputs:
        runner_label: ${{ steps.create_runner.outputs.runner_label }}
    release:
      name: Release
      runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
      needs: create_runner
      steps:
        - uses: nowsprinting/check-version-format-action@447b28744b1b954470f128d1d86ff636164c87c1
          id: version
          with:
            prefix: 'v'
        - name: Check version
          if: steps.version.outputs.is_valid == 'false'
          run: |
                echo "Version: ${{github.ref_name}} is not valid!"
                exit 1
        - name: Check out the repo
          uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        - name: Create AWS ECR repository
          uses: pagopa/pdnd-github-actions/create-ecr-repository@74cf3f8abfacd6814b924408a11b02f177f8f5a3
          with:
            repositoryName: ${{ github.event.repository.name }}
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Login to code artifact
          run: |
            echo CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ vars.CODE_ARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \
              --query authorizationToken --output text --region ${{ vars.AWS_REGION }}) >> $GITHUB_ENV
        - name: Build, tag, and push docker image to Amazon ECR
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY:  ${{ github.event.repository.name }}
            IMAGE_TAG: ${{ steps.version.outputs.full }}
          run: |
            docker build \
                --build-arg CODEARTIFACT_AUTH_TOKEN="${CODEARTIFACT_AUTH_TOKEN}" --build-arg AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}" \
                --build-arg CODEARTIFACT_DOMAIN="${CODE_ARTIFACT_DOMAIN}" --build-arg CODEARTIFACT_INTERNAL_REPO="${CODE_ARTIFACT_INTERNAL_REPO}" \
                -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker push $REGISTRY/$REPOSITORY:latest
        - name: Deploy Airflow dags
          uses: pagopa/pdnd-github-actions/deploy-airflow-dags@1d69db82abb736b2301a636a6de243c9bb4505c3
          with:
            project: ${{ github.event.repository.name }}
            version: ${{ steps.version.outputs.full }}
            airflow_api_url: "${{ vars.PDND_GATEWAY_URL }}/airflow-${{ inputs.airflow_env }}/api/v1"
            airflow_username: ${{ secrets.AIRFLOW_USERNAME }}
            airflow_password: ${{ secrets.AIRFLOW_PASSWORD }}
            airflow_dags_volume_path: ${{ inputs.airflow_volume_mount_path }}/airflow-${{ inputs.airflow_env }}-dags
        - name: Slack Notification
          uses: ravsamhq/notify-slack-action@bca2d7f5660b833a27bda4f6b8bef389ebfefd25
          if: ${{ always() && !contains(needs.create_runner.result, 'failure') && github.ref_type == 'tag' }}
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            status: ${{ job.status }}
            notification_title: "{workflow} has {status_message}"
            message_format: "{emoji} *{workflow}* <https://github.com/{repo}/actions/runs/${{ github.run_id }}|${{github.ref_name}}> {status_message} in <{repo_url}|{repo}>"
            footer: "<{repo_url}|Repo> | <{workflow_url}|Workflow>"
            notify_when: "success,failure,warnings"
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    destroy_runner:
      runs-on: ubuntu-latest
      permissions:
        id-token: write
        contents: read
      if: ${{ always() && !contains(needs.create_runner.result, 'failure') && github.ref_type == 'tag' }}
      needs:
        - create_runner
        - release
      steps:
        - name: Destroy Runner
          id: destroy_runner
          uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
          with:
            cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
            aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
            runner_label: ${{ needs.create_runner.outputs.runner_label }}
            namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }}