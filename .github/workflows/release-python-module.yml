name: Python Semantic Release

on:
  workflow_call:
    inputs:
      release-type:
        required: false
        type: string
      working-directory:
        required: true
        type: string
      ci-timeout:
        default: 25
        type: number

jobs:
  create_runner:
    name: Create Runner
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create Runner
        id: create_runner
        uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          name: ${{ github.event.repository.name }}
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
          image: ${{ vars.RUNNER_DOCKER_IMAGE}}
          service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
          docker_enabled: true
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  release:
    name: Release
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs: create_runner
    timeout-minutes: 30
    defaults:
      run:
        working-directory: libs/${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main
      - name: Login to AWS CodeArtifact
        run: |
          export "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ vars.CODE_ARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --query authorizationToken --output text --region ${{ vars.AWS_REGION }})"
          export "REPOSITORY_ENDPOINT=$(aws codeartifact get-repository-endpoint --domain ${{ vars.CODE_ARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --repository ${{ vars.CODE_ARTIFACT_INTERNAL_REPO }} --format pypi --query repositoryEndpoint --output text)"
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo "::add-mask::$REPOSITORY_ENDPOINT"
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_ENV
          echo "REPOSITORY_ENDPOINT=$REPOSITORY_ENDPOINT" >> $GITHUB_ENV
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        env:
          CODEARTIFACT_AUTH_TOKEN: ${{ env.CODEARTIFACT_AUTH_TOKEN }}
          REPOSITORY_ENDPOINT: ${{ env.REPOSITORY_ENDPOINT}}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          vcs_release: "true"
          prerelease: "false"
          commit: "true"
          push: "true"
          force: ${{ inputs.release-type }}
          changelog: "true"
          directory: libs/${{ inputs.working-directory }}
  destroy_runner:
    name: Destroy Runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ always() && !contains(needs.create_runner.result, 'failure') && !contains(needs.create_runner.result, 'skipped')}}
    needs:
      - create_runner
      - release
    steps:
      - name: Destroy Runner
        id: destroy_runner
        uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          runner_label: ${{ needs.create_runner.outputs.runner_label }}
          namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }}
