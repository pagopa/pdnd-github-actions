name: Deploy
on:
  workflow_call:
    inputs:
      ref_name:
        description: 'Deploy ref name'
        default: ${{ github.ref }}
        required: false
        type: string
jobs:
  create_runner:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create runner
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create Runner
        id: create_runner
        uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@fb2dd07fda1de2db4868edd8d77f3eb2caff334c
        with:
          name: ${{ github.event.repository.name }}
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
          image: ${{ vars.RUNNER_DOCKER_IMAGE}}
          service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
          docker_enabled: true
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs:
      - create_runner
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref_name }}
          persist-credentials: false
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
          restore-keys: ${{ runner.os }}-m2
      - name : Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install -r ./.github/workflows/requirements.txt
      - name: Setup from env variables
        env:
          K8S_APPLICATION_NAME: ${{ vars.K8S_APPLICATION_NAME }}
          K8S_SERVICE_ACCOUNT_NAME: ${{ vars.K8S_SERVICE_ACCOUNT_NAME }}
        run: |
          cat src/main/kubernetes/kubernetes.yml | envsubst '$K8S_APPLICATION_NAME $K8S_SERVICE_ACCOUNT_NAME'  > src/main/kubernetes/kubernetes.yml.tmp
          mv src/main/kubernetes/kubernetes.yml.tmp src/main/kubernetes/kubernetes.yml
          cat src/main/resources/application.properties | envsubst '$HTTP_BASE_PATH' > src/main/resources/application.properties.tmp
          mv src/main/resources/application.properties.tmp src/main/resources/application.properties
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV
      - name: setup-git-credentials
        uses: de-vri-es/setup-git-credentials@v2.0.10
        with:
          credentials: https://pdnd-pagopa-github-bot:${{ secrets.PAT_BOT }}@github.com/
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2    
      - name: Generating k8s yml
        run: mvn package
          -Dquarkus.kubernetes.ingress.expose=true
          -Dquarkus.container-image.registry=${{ steps.login-ecr.outputs.registry }}
          -Dquarkus.container-image.group=${{ vars.IMAGE_GROUP }}
          -Dquarkus.container-image.tag=${{ env.VERSION }}
          -Dquarkus.application.version="${{ env.VERSION }}"
          -Dquarkus.kubernetes.ingress.ingress-class-name=external-api-nginx
          -Dquarkus.kubernetes.ingress.annotations.\"nginx.ingress.kubernetes.io/rewrite-target\"="/\$2"
          -Dquarkus.kubernetes.ingress.annotations.\"nginx.ingress.kubernetes.io/use-regex\"="true"
          -Dquarkus.kubernetes.service-account=${{ vars.K8S_SERVICE_ACCOUNT_NAME }}
          -Dquarkus.kubernetes.name=${{ vars.K8S_APPLICATION_NAME }}
          -Dquarkus.kubernetes.add-version-to-label-selectors=false
          -Dquarkus.kubernetes.replicas=2
          -Dquarkus.kubernetes.resources.requests.memory=128Mi
          -Dquarkus.kubernetes.resources.requests.cpu=250m
          -Dquarkus.kubernetes.resources.limits.memory=256Mi
          -Dquarkus.kubernetes.resources.limits.cpu=500m
          -Dquarkus.kubernetes.ports.http.path="${{ vars.HTTP_BASE_PATH }}(/|$)(.*)"
          -DskipTests
      - name: 'Deploy kubernetes'
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.MAIN_CLUSTER_NAME }}
          echo "yml generated : "
          cat target/kubernetes/kubernetes.yml
          echo "end "
          kubectl apply  -f target/kubernetes/kubernetes.yml -n  ${{ vars.MS_K8S_NAMESPACE }}
      - name : Convert openapi
        run: |
          wget --header "Authorization: token ${{ secrets.PAT_BOT }}" ${{ vars.OPENAPI_INTEGRATION_SCRIPT_URL }} -P /tmp/
          python /tmp/openapi_integration.py -i src/main/resources/META-INF/openapi.yaml -o ${{ vars.AWS_OPENAPI_PATH }}

      - name : Deploy openapi
        run: |
          cd .infra/aws
          ./terraform.sh plan prod -target=module.deploy_api_gw
          ./terraform.sh apply prod -auto-approve -target=module.deploy_api_gw
  destroy_runner:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ always() && !contains(needs.create_runner.result, 'failure') && startsWith(github.ref, 'refs/tags/v')}}
    needs:
      - create_runner
      - deploy
    steps:
      - name: Destroy Runner
        id: destroy_runner
        uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@fb2dd07fda1de2db4868edd8d77f3eb2caff334c
        with:
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          runner_label: ${{ needs.create_runner.outputs.runner_label }}
          namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }}
