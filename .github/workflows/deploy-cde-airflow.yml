name: Deploy CDE Airflow Job
on:
  workflow_call:
    inputs:
      config-json:
        description: 'config to deploy'
        type: string
        required: true
      vcluster-endpoint:
        description: 'the vcluster to deploy on'
        type: string
        required: true
      
jobs:
  create_runner:
    name: Create Runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create Runner
        id: create_runner
        if: ${{ !env.ACT }}
        uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          name: ${{ github.event.repository.name }}
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
          image: ${{ vars.RUNNER_DOCKER_IMAGE}}
          service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
          docker_enabled: true
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  parse-config:
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs:
      - create_runner
    steps:
      - name: Hack container for local development
        if: ${{ env.ACT }}
        run: echo /runnertmp/externals/node16/bin/ >> $GITHUB_PATH
      - name: Checkout the repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Validate schema write file
        run: |
          echo ${{ inputs.config-json }} | sed 's/\\"/"/g' | jq . > input_config.json
          echo '{"$schema": "http://json-schema.org/draft-07/schema#","type": "object","properties": {"job": {"type": "object","properties": {"name": {"type": "string"},"application-file": {"type": "string"},"dag-file": {"type": "string"}},"required": ["name"],"additionalProperties": true},"resources": {"type": "array","minItems": 1,"items": {"type": "object","properties": {"create": {"type": "object","additionalProperties": true},"upload": {"type": "array","minItems": 1,"items": {"type": "object","additionalProperties": true}}},"required": ["create", "upload"],"additionalProperties": true}},"venv": {"type": "object","properties": {"file-name": {"type": "string"},"resource": {"type": "string"}},"additionalProperties": true},"job_default_args": {"type": "boolean"},"owner": {"type": "string"},"base_dir": {"type": "string"}},"required": ["job", "base_dir", "resources"],"additionalProperties": false}' > schema.json
      - name: Validate schema
        uses: cardinalby/schema-validator-action@2166123eb256fa40baef7e22ab1379708425efc7
        with:
          file: 'input_config.json'
          schema: 'schema.json'
      - name: Get bot users
        uses: aws-actions/aws-secretsmanager-get-secrets@4e95aaf6ba8028772f5384971d4fedccfaab8621 #v2.0.6
        with:
          secret-ids: |
             CLOUDERA_BOT_USERS,${{ vars.CLOUDERA_BOT_USERS_SECRET_NAME }} 
      - name: Build commands
        id: parse_json
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            function buildOptions(json){
                var command = ''
                for (const [key, value] of Object.entries(json)) {
                    if (typeof value === 'boolean') {
                        if (value) {
                            command += ` --${key}`;
                        }
                    }
                    else if (Array.isArray(value)) {
                        value.forEach(element => {
                            command += ` --${key}="${element}"`;
                        });
                    } else if (typeof value === 'object' && value !== null) {
                        throw new Error(`Unsupported nested object for key: ${key}`);
                    } else {
                        command += ` --${key}="${value}"`;
                    }
                }
                return command
            }
            const fs = require('fs');
            console.log("input provided : ")
            console.log(${{ inputs.config-json }})
            config=JSON.parse(${{ inputs.config-json }});
            console.log("Using configuration:", config);
            const dag_owner = config.owner;
            const clouderaBotUsersSecret = JSON.parse(process.env.CLOUDERA_BOT_USERS);
            const acces_keys = clouderaBotUsersSecret[dag_owner];
            if (!acces_keys){
              throw new Error('owner specified not found in secrets');
            }
            const command_sequence = [];
            let opts = buildOptions(config.job)
            const job_create_cmd = `
                if cde job describe --name ${config.job.name} >/dev/null 2>&1; then
                  cde job delete --name ${config.job.name}
                fi;
                cde job create --type="airflow" ${opts}
            `;

            config.resources.forEach(resource => {

              const create_cmd = `
                  if ! cde resource describe --name ${resource.create.name} >/dev/null 2>&1; then
                    cde resource create ${buildOptions(resource.create)}
                  fi
              `;
              command_sequence.push(create_cmd);
              resource.upload.forEach(upload =>{
                      const upload_cmd = "cde resource upload " + buildOptions(upload)
                      command_sequence.push(upload_cmd)
                  })
            });
            command_sequence.push(job_create_cmd)
            res = {
                "commands" : command_sequence,
                "vcluster" : "${{ inputs.vcluster-endpoint }}",
                "base_dir" : config.base_dir,
                "cde_acces_keys" : acces_keys
            }
            console.log("conf parsed : ")
            console.log(res)
            return res
    outputs:
      parsed_config: ${{ steps.parse_json.outputs.result }}
  execute-commands:
    runs-on: self-hosted
    strategy:
      max-parallel: 1
      matrix:
        command: ${{  fromJson(needs.parse-config.outputs.parsed_config).commands }}
    needs:
      - parse-config
    steps:
      - name: Hack container for local development
        if: ${{ env.ACT }}
        run: echo /runnertmp/externals/node16/bin/ >> $GITHUB_PATH
      - name: Checkout the repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        if: ${{  fromJson(needs.parse-config.outputs.parsed_config).venv }}
        with:
          name: build-artifact
          path: ${{  fromJson(needs.parse-config.outputs.parsed_config).base_dir }}  
      - name: Setup CDE CLI
        uses: pagopa/pdnd-github-actions/setup-cde-cli@b6de1cd44031f1b3c8546864b55b713f4d5fdd28
        with:
            version: "1.20.3"
            access_key_id: ${{  fromJson(needs.parse-config.outputs.parsed_config).cde_acces_keys.access_key_id }}
            private_key: ${{  fromJson(needs.parse-config.outputs.parsed_config).cde_acces_keys.private_key }}
            codeartifact_domain: ${{ vars.CODEARTIFACT_DOMAIN }}
            codeartifact_repository: ${{ vars.CODEARTIFACT_REPOSITORY }}
            vcluster_endpoint:  ${{ inputs.vcluster-endpoint }}
      - name: Run commands
        working-directory: ${{  fromJson(needs.parse-config.outputs.parsed_config).base_dir }}
        run: |
          echo "current dir : "
          pwd
          echo "dir content :"
          ls -lart
          echo executing command : '${{ matrix.command }}'
          eval "${{ matrix.command }}"
  destroy_runner:
    name: Destroy Runner
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    if: ${{ always() && !contains(needs.create_runner.result, 'failure')}}
    needs:
        - create_runner
        - execute-commands
    steps:
        - name: Destroy Runner
          id: destroy_runner
          if: ${{ !env.ACT }}
          uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
          with:
              cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
              aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
              runner_label: ${{ needs.create_runner.outputs.runner_label }}
              namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }} 