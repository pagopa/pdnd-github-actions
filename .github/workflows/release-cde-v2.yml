name: Release Jobs
on:
  workflow_call:
    inputs:
      deploy-type:
        description: 'Deploy on spark or airflow'
        required: true
        type: string
jobs:
  create_runner:
    name: Create Runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create Runner
        id: create_runner
        if: ${{ !env.ACT }}
        uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          name: ${{ github.event.repository.name }}
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
          image: ${{ vars.RUNNER_DOCKER_IMAGE}}
          service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
          docker_enabled: true
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  prepare-release:
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs:
      - create_runner
    steps:
      - name: Hack container for local development
        if: ${{ env.ACT }}
        run: echo /runnertmp/externals/node16/bin/ >> $GITHUB_PATH
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4
        with:
            fetch-depth: 0
      - name: Get Latest Tag
        id: get-latest-tag
        uses: WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce
      - name: Get changed folders
        id: changed-files
        uses: tj-actions/changed-files@e9772d140489982e0e3704fea5ee93d536f1e275        
        with:
            dir_names_exclude_current_dir: true
            matrix: true
            quotepath: true
            base_sha: ${{ steps.get-latest-tag.outputs.tag }}
      - name: Build commands
        id: compute-release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const fs = require('fs');
            const path_module = require('path');
            const mod_files = ${{ steps.changed-files.outputs.all_changed_files }};
            console.log("modified since last release :")
            console.log(mod_files);

            let config_dir = ".github/workflows/config/prod"
            const config = fs.readdirSync(config_dir);

            function computeConf(files){
              var res = [];
              files.forEach(path => {
                  console.log("processing path " + path)
                  config.forEach(file => {
                      const filePath = path_module.join(config_dir, file);
                      const fileContent = fs.readFileSync(filePath, 'utf-8');
                      let jsonContent = JSON.parse(fileContent);
                      let changed_dir = path_module.dirname(path);
                      const base_dir = str => jsonContent.base_dir.endsWith('/') ? jsonContent.base_dir.slice(0, -1) : jsonContent.base_dir;
                      if (changed_dir == base_dir) {
                        res.push(JSON.stringify(jsonContent));
                      }
                  })
                  //conf changed
                  const regex = /^\.github\/workflows\/config\/prod\/(.+)\.json$/;
                  const match = path.match(regex);
                  if (match) {
                    let fileContent = fs.readFileSync(path, 'utf-8');
                    let jsonContent = JSON.parse(fileContent);
                    res.push(JSON.stringify(jsonContent));
                    
                  }
              });
              let unique_combo = [...new Set(res.map(JSON.stringify))].map(JSON.parse);
              return unique_combo
            }
            let to_deploy = computeConf(mod_files)
            console.log("conf of dags to deploy")
            console.log(to_deploy)
            return to_deploy
    outputs:
        configs: ${{ steps.compute-release.outputs.result }}
  deploy-airflow:
      if:  inputs.deploy-type  == 'airflow'
      needs:
        - prepare-release
      strategy:
          matrix:
            target: ${{  fromJson(needs.prepare-release.outputs.configs) }}
      concurrency:
        group: deploy-concurrency-${{ matrix.target.job.name }}
        cancel-in-progress: false
      uses: ./.github/workflows/deploy-cde-airflow.yml
      secrets: inherit
      with:
          config-json: ${{ toJson(matrix.target) }}
          vcluster-endpoint:  "${{ vars.VCLUSTER_ENDPOINT_PROD }}"
  deploy-spark:
    if:  inputs.deploy-type  == 'spark'
    needs:
      - prepare-release
    strategy:
        matrix:
          target: ${{  fromJson(needs.prepare-release.outputs.configs) }}
    concurrency:
      group: deploy-concurrency-${{ matrix.target.job.name }}
      cancel-in-progress: false
    uses: ./.github/workflows/deploy-cde-spark.yml
    secrets: inherit
    with:
        config-json: ${{ toJson(matrix.target) }}
        vcluster-endpoint:  "${{ vars.VCLUSTER_ENDPOINT_PROD }}"
  release:
    name: Release git tag
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs:
      - create_runner
      - prepare-release
      - deploy-airflow
      - deploy-spark
    if: ${{ always() && !(contains(needs.deploy-airflow.result, 'failure') || contains(needs.deploy-spark.result, 'failure'))}}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix: 
        run: ${{ fromJSON(needs.prepare-release.outputs.configs) }}
    concurrency:
      group: deploy-cde
      cancel-in-progress: false
    outputs:
      new_tag: ${{ steps.semantic_release.outputs.tag }}
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Hack container for local development
        if: ${{ env.ACT }}
        run: |
          echo /runnertmp/externals/node16/bin/ >> $GITHUB_PATH
          echo running on dir : ${{ fromJSON(matrix.run).base_dir }}
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4
        with:
          token: ${{ secrets.PAT_BOT }}
          fetch-depth: 0
      - name: Setup repo
        run: |
          git pull origin main
          git config --global --add safe.directory $GITHUB_WORKSPACE/${{ fromJSON(matrix.run).base_dir }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@fe6b271e942115b528c85e42bc19611b01dcea59 #v9.8.8
        id: semantic_release
        with:
          directory:  ${{ fromJSON(matrix.run).base_dir }}
          github_token: ${{ secrets.PAT_BOT }}
          push: "true"
          tag: "true"
      - name: Check Calculated Version Output
        if: steps.semantic_release.outputs.released
        run: |
          echo "New Release Version: ${{ steps.semantic_release.outputs.tag }}"
      - name: Slack Notification
        uses: ravsamhq/notify-slack-action@be814b201e233b2dc673608aa46e5447c8ab13f2
        if: ${{ always() && !contains(needs.create_runner.result, 'failure') }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          notification_title: "{workflow} has {status_message}"
          message_format: "{emoji} *{workflow}* <https://github.com/{repo}/actions/runs/${{ github.run_id }}|${{github.ref_name}}> {status_message} in <{repo_url}|{repo}>"
          footer: "<{repo_url}|Repo> | <{workflow_url}|Workflow>"
          notify_when: "success,failure,warnings"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  destroy_runner:
    name: Destroy Runner
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    if: ${{ always() && !contains(needs.create_runner.result, 'failure')}}
    needs:
        - create_runner
        - release
    steps:
        - name: Destroy Runner
          id: destroy_runner
          if: ${{ !env.ACT }}
          uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
          with:
              cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
              aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
              runner_label: ${{ needs.create_runner.outputs.runner_label }}
              namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }}       
            

            


