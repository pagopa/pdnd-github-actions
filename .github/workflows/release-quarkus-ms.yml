name: Release
on:
  workflow_call:
    inputs:
      branch_name:
        description: 'Release Branch name'
        default: "master"
        required: false
        type: string
      native:
        description: 'Native Build'
        default: false
        required: true
        type: boolean
jobs:
  create_runner:
    runs-on: ubuntu-latest
    steps:
      - name: Create Runner
        id: create_runner
        uses: pagopa/pdnd-github-actions/deploy-gh-runner@v1.0.1
        with:
          api_server: ${{ vars.K8S_API_SERVER }}
          access_token: ${{ secrets.GH_ACTIONS_SA_ACCESS_TOKEN }}
          base64_encoded_ca_crt: ${{ secrets.K8S_CA_CRT }}
          name: ${{ github.event.repository.name }}
          namespace: prod-github-runners
          image: gateway.private.pdnd.pagopa.it/pagopa/pdnd-aws-runner-microservices:eks
          service_account: github-actions-sa
          docker_enabled: true
          image_pull_secret: regcred
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  release:
    runs-on: [ self-hosted, "${{ needs.create_runner.outputs.runner_label }}" ]
    needs:
      - create_runner
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_BOT }}
      JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
      BOT_USERNAME: pdnd-pagopa-github-bot
      BOT_EMAIL: "pdnd-pagopa-github-bot@pagopa.it"
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_BOT }}
      - name: Java Setup
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Remove Snapshot
        run: |
          ./mvnw versions:set -DremoveSnapshot versions:commit
          git config --global user.name ${{ env.BOT_USERNAME }}
          git config --global user.email ${{ env.BOT_EMAIL }}
          git add -A
          git commit -m "[ci skip] Removed snapshot version for current release"
      - name: Create Tag
        run: |
          git config --global user.name ${{ env.BOT_USERNAME }}
          git config --global user.email ${{ env.BOT_EMAIL }}
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          git tag -a v$VERSION -m "Version $VERSION"
          git push origin --tags
      - name: Move to next version
        run: |
          ./mvnw build-helper:parse-version versions:set \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT \
          versions:commit
          git config --global user.name ${{ env.BOT_USERNAME }}
          git config --global user.email ${{ env.BOT_EMAIL }}
          git add -A
          git commit -m "[ci skip] Incremented version for next release"
      - name: Push
        uses: pagopa/pdnd-github-actions/push-bot@v1.0.1
        with:
          token: ${{ secrets.PAT_BOT }}
          branch_name: ${{ inputs.branch_name }}
          bot_name: ${{ env.BOT_USERNAME }}
      - name: Set environment variable
        run: echo "RELEASE_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
    outputs:
      release_tag: ${{ env.RELEASE_TAG }}
  deploy:
    runs-on: [ self-hosted, "${{ needs.create_runner.outputs.runner_label }}" ]
    needs:
      - create_runner
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: "${{ needs.release.outputs.release_tag }}"
          persist-credentials: false
      - name: Java Setup
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install -r ./.github/workflows/requirements.txt

      - name: Setup from env variables
        env:
          K8S_APPLICATION_NAME: ${{ vars.K8S_APPLICATION_NAME }}
          HTTP_BASE_PATH: ${{ vars.HTTP_BASE_PATH }}
        run: |
          cat src/main/kubernetes/kubernetes.yml | envsubst '$K8S_APPLICATION_NAME $HTTP_BASE_PATH'  > src/main/kubernetes/kubernetes.yml.tmp
          mv src/main/kubernetes/kubernetes.yml.tmp src/main/kubernetes/kubernetes.yml
          cat src/main/resources/application.properties | envsubst '$HTTP_BASE_PATH' > src/main/resources/application.properties.tmp
          mv src/main/resources/application.properties.tmp src/main/resources/application.properties

      - name: Image Release
        run: mvn package -B ${{ github.event.inputs.native == 'true' && '-Pnative -Dquarkus.native.container-build=true ' || '' }}
          -Dquarkus.container-image.build=true
          -Dquarkus.container-image.push=true
          -Dquarkus.container-image.registry=${{ vars.IMAGE_REGISTRY_URL }}
          -Dquarkus.container-image.group=${{ vars.IMAGE_GROUP }}
          -Dquarkus.container-image.username=${{ secrets.NEXUS_USERNAME }}
          -Dquarkus.container-image.password=${{ secrets.NEXUS_PASSWORD }}
          -Dquarkus.kubernetes.env.vars.SMALLRYE_CONFIG_SOURCE_FILE_LOCATIONS=/mnt/secrets-store
          -Dquarkus.kubernetes.mounts.secrets-store-inline.path=/mnt/secrets-store
          -Dquarkus.kubernetes.image-pull-secrets=regcred
          -Dquarkus.kubernetes.ingress.expose=true
          -Dquarkus.kubernetes.ingress.annotations.\"alb.ingress.kubernetes.io/group.name\"=${{ vars.ALB_INGRESS_GROUP_NAME }}
          -Dquarkus.kubernetes.ingress.annotations.\"alb.ingress.kubernetes.io/target-type\"=ip
          -Dquarkus.kubernetes.ingress.annotations.\"alb.ingress.kubernetes.io/load-balancer-name\"=${{ vars.ALB_INGRESS_LOAD_BALANCER_NAME }}
          -Dquarkus.kubernetes.ingress.annotations.\"alb.ingress.kubernetes.io/scheme\"=internal
          -Dquarkus.kubernetes.ingress.ingress-class-name=alb
          -Dquarkus.kubernetes.ports.http.path=${{ vars.HTTP_BASE_PATH }}
          -Dquarkus.kubernetes.service-account=${{ vars.K8S_SERVICE_ACCOUNT_NAME }}
          -Dquarkus.kubernetes.name=${{ vars.K8S_APPLICATION_NAME }}
          -Dquarkus.kubernetes.add-version-to-label-selectors=false
          -Dquarkus.kubernetes.replicas=2
          -Dquarkus.kubernetes.resources.requests.memory=128Mi
          -Dquarkus.kubernetes.resources.requests.cpu=250m
          -Dquarkus.kubernetes.resources.limits.memory=256Mi
          -Dquarkus.kubernetes.resources.limits.cpu=500m
          -DskipTests

      - name: 'Deploy kubernetes'
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GHWF_SERVING_MS_AWS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.GHWF_SERVING_MS_AWS_KEY_ID }}
        run: |
          aws eks update-kubeconfig --region eu-central-1 --name pdnd-prod-cluster-eks
          kubectl apply  -f target/kubernetes/kubernetes.yml -n pdnd-prod-ms

      - name: Convert openapi
        run: |
          wget --header "Authorization: token ${{ secrets.PAT_BOT }}" ${{ vars.OPENAPI_INTEGRATION_SCRIPT_URL }} -P /tmp/
          python /tmp/openapi_integration.py -i src/main/resources/META-INF/openapi.yaml -o ${{ vars.AWS_OPENAPI_PATH }}

      - name: Deploy openapi
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GHWF_SERVING_MS_AWS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.GHWF_SERVING_MS_AWS_KEY_ID }}
        run: |
          cd .infra/aws
          ./terraform.sh plan prod
          ./terraform.sh apply prod -auto-approve

  destroy_runner:
    runs-on: ubuntu-latest
    if: ${{ always() && !contains(needs.create_runner.result, 'failure') }}
    needs:
      - create_runner
      - deploy
    steps:
      - name: Destroy Runner
        id: destroy_runner
        uses: pagopa/pdnd-github-actions/undeploy-gh-runner@v1.0.1
        with:
          api_server: ${{ vars.K8S_API_SERVER }}
          access_token: ${{ secrets.GH_ACTIONS_SA_ACCESS_TOKEN }}
          base64_encoded_ca_crt: ${{ secrets.K8S_CA_CRT }}
          runner_label: ${{ needs.create_runner.outputs.runner_label }}
          namespace: prod-github-runners
