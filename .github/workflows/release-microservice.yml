name: Release Microservice
on:
  workflow_call:
    inputs:
      repository-language:
        required: true
        type: string

jobs:
  create_runner:
    name: Create Runner
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create Runner
        id: create_runner
        uses: pagopa/pdnd-github-actions/deploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          name: ${{ github.event.repository.name }}
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          namespace: ${{ vars.RUNNER_K8S_NAMESPACE }}
          image: ${{ vars.RUNNER_DOCKER_IMAGE }}
          service_account: ${{ vars.RUNNER_SERVICE_ACCOUNT }}        
          docker_enabled: true
    outputs:
      runner_label: ${{ steps.create_runner.outputs.runner_label }}
  get_version:
    name: Get Application Version
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs: create_runner
    outputs:
      app_version: ${{ steps.get_version.outputs.app_version }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Get Version (Python)
        if: ${{ inputs.repository-language }} == 'python'
        id: get_version
        run: |
          APP_VERSION=$(poetry version --short)
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
  publish_artifacts:
    name: Publish Artifacts
    runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_label }}"]
    needs:
      - create_runner
      - get_version
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - name: Create AWS ECR Docker Registry
        id: ecr_docker_registry
        uses: pagopa/pdnd-github-actions/create-ecr-repository@74cf3f8abfacd6814b924408a11b02f177f8f5a3
        with:
          repositoryName: ${{ github.event.repository.name }}
      - name: Create AWS ECR Helm Repository
        id: ecr_helm_repository
        uses: pagopa/pdnd-github-actions/create-ecr-repository@74cf3f8abfacd6814b924408a11b02f177f8f5a3
        with:
          repositoryName: charts/${{ github.event.repository.name }}
      - name: Login to AWS ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v2
      - name: Publish Container Image to AWS ECR
        id: image_publish
        env:
          REGISTRY: ${{ steps.ecr_login.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ needs.get_version.outputs.app_version }}
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
              --build-arg DOCKER_REGISTRY_URI=$REGISTRY \
              -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest
      - name: Push Helm Chart to AWS ECR
        env:
          CHART_VERSION: ${{ needs.get_version.outputs.app_version }}
          APP_VERSION: ${{ needs.get_version.outputs.app_version }}
          REGISTRY: ${{ steps.ecr_login.outputs.registry }}
          CHART: ${{ github.event.repository.name }}
        run: |
          helm package .k8s/helm/$CHART --version $CHART_VERSION --app-version $APP_VERSION
          helm push $CHART-$CHART_VERSION.tgz oci://$REGISTRY/charts
  destroy_runner:
    name: Destroy Runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ always() && !contains(needs.create_runner.result, 'failure') && !contains(needs.create_runner.result, 'skipped')}}
    needs:
      - create_runner
      - get_version
      - publish_artifacts
    steps:
      - name: Destroy Runner
        id: destroy_runner
        uses: pagopa/pdnd-github-actions/undeploy-eks-gh-runner@7fb09afd4227db40789da70cbdaa2c7157abff49
        with:
          cluster_name: ${{ vars.RUNNER_CLUSTER_NAME }}
          aws_runner_deploy_role: ${{ secrets.AWS_RUNNER_DEPLOY_ROLE }}
          runner_label: ${{ needs.create_runner.outputs.runner_label }}
          namespace:  ${{ vars.RUNNER_K8S_NAMESPACE }}